uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d focalmask;

uniform float xOffset;
uniform float yOffset;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataOut v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

/**
 * Standard Kawase blur
 */
float4 PSKawaseBlur(VertDataOut v_in) : TARGET
{
	// Calculate the blur value from neighboring pixels
	float4 sum = float4(0.0, 0.0, 0.0, 0.0);
	sum += image.Sample(textureSampler, v_in.uv + float2( xOffset,  yOffset));
	sum += image.Sample(textureSampler, v_in.uv + float2(-xOffset,  yOffset));
	sum += image.Sample(textureSampler, v_in.uv + float2( xOffset, -yOffset));
	sum += image.Sample(textureSampler, v_in.uv + float2(-xOffset, -yOffset));
	sum *= 0.25;
	return sum;
}

/**
 * Mask aware Kawase blur
 * Only uses pixels which are in the masked area for blur. This prevents the "Halo Effect" on
 * the border pixels of the mask.
 */
float4 PSKawaseBlurMaskAware(VertDataOut v_in) : TARGET
{
	if (focalmask.Sample(textureSampler, v_in.uv).r == 0) {
		// No mask - return the original image value without any blur
		return image.Sample(textureSampler, v_in.uv);
	}

	// Calculate the blur value from neighboring pixels

	float alphaValue1 = focalmask.Sample(textureSampler, v_in.uv + float2( xOffset,  yOffset)).r;
	float4 sum = image.Sample(textureSampler, v_in.uv + float2( xOffset,  yOffset)) * alphaValue1;

	float alphaValue2 = focalmask.Sample(textureSampler, v_in.uv + float2(-xOffset,  yOffset)).r;
	sum += image.Sample(textureSampler, v_in.uv + float2(-xOffset,  yOffset)) * alphaValue2;

	float alphaValue3 = focalmask.Sample(textureSampler, v_in.uv + float2( xOffset, -yOffset)).r;
	sum += image.Sample(textureSampler, v_in.uv + float2( xOffset, -yOffset)) * alphaValue3;

	float alphaValue4 = focalmask.Sample(textureSampler, v_in.uv + float2(-xOffset, -yOffset)).r;
	sum += image.Sample(textureSampler, v_in.uv + float2(-xOffset, -yOffset)) * alphaValue4;

    float pixelCounter = alphaValue1 + alphaValue2 + alphaValue3 + alphaValue4;

	// Complement the blur pixels with a relative fraction of the center pixel
	return (sum + image.Sample(textureSampler, v_in.uv) * (4.0 - pixelCounter)) * 0.25;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSKawaseBlur(v_in);
	}
}

technique DrawMaskAware
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSKawaseBlurMaskAware(v_in);
	}
}
